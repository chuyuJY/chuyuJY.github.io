<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - Tag - Chuyu&#39;s Blog</title>
        <link>https://blog.seucy.me/tags/go/</link>
        <description>Go - Tag - Chuyu&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1205667742@qq.com (Chuyu)</managingEditor>
            <webMaster>1205667742@qq.com (Chuyu)</webMaster><lastBuildDate>Tue, 25 Apr 2023 20:13:28 &#43;0800</lastBuildDate><atom:link href="https://blog.seucy.me/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>深度探索Go语言</title>
    <link>https://blog.seucy.me/10-%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2go%E8%AF%AD%E8%A8%80/</link>
    <pubDate>Tue, 25 Apr 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/10-%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2go%E8%AF%AD%E8%A8%80/</guid>
    <description><![CDATA[前言：用来记录Go的语言特性，主要参考为B站《幼麟实验室》及《深度探索Go语言》。 一、基础知识 1.1 数据结构 1.1.1 String 编码：定长编码非常浪费内存，所以]]></description>
</item>
<item>
    <title>Go-性能分析</title>
    <link>https://blog.seucy.me/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
    <pubDate>Mon, 06 Mar 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[[toc] 一、概述 在 Go 语言中，主要关注的程序运行情况包括以下几种： CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面]]></description>
</item>
<item>
    <title>Go-内存逃逸</title>
    <link>https://blog.seucy.me/go%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
    <pubDate>Sun, 05 Mar 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[[toc] 一、概述 Go 编译器会尽可能将变量分配到到栈上。但是， 当编译器无法证明函数返回后，该变量没有被引用，那么编译器就必须在堆上分配该变量，以此避免]]></description>
</item>
<item>
    <title>Go-常见编程操作</title>
    <link>https://blog.seucy.me/go%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Sat, 25 Feb 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[使用方法名字符串，调用方法 思路：通过 reflect。 1 2 3 4 5 6 7 8 9 10 11 12 type animal struct { name string } func (a *animal) Eat() { println(&#34;animal eat&#34;) } func main() { a := animal{&#34;cat&#34;} reflect.ValueOf(&amp;a).MethodByName(&#34;Eat&#34;).Call([]reflect.Value{}) } 3个 goroutine 按照顺序分别]]></description>
</item>
<item>
    <title>Go-GMP</title>
    <link>https://blog.seucy.me/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Wed, 22 Feb 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[[toc] 参考文章： Go语言设计与实现 深入了解 Go 语言与并发编程 从 bug 中学习：六大开源项目告诉你 go 并发编程的那些坑 一、Go 并发机制 Go 的调度器使用 G、M、]]></description>
</item>
<item>
    <title>Go-WaitGroup</title>
    <link>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-waitgroup/</link>
    <pubDate>Mon, 20 Feb 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-waitgroup/</guid>
    <description><![CDATA[一、结构 WaitGroup 的结构很简单，维护了三个不同的计数，分别是 counter、waiter 和 semaphore： counter 记录了要等待结束的 goroutine 个数； waiter 记录了等]]></description>
</item>
<item>
    <title>Go-Context</title>
    <link>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-context/</link>
    <pubDate>Sun, 19 Feb 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-context/</guid>
    <description><![CDATA[前言：在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC]]></description>
</item>
<item>
    <title>Go-Channel</title>
    <link>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-channel/</link>
    <pubDate>Sat, 18 Feb 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-channel/</guid>
    <description><![CDATA[[toc] 参考文章： Golang Channel 实现原理 一、核心数据结构 1.1 hchan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type hchan struct { qcount uint // total data in the queue dataqsiz uint // size of the circular queue buf unsafe.Pointer // points to an array of dataqsiz elements elemsize uint16 closed uint32]]></description>
</item>
<item>
    <title>Go浅析-Atomic</title>
    <link>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-atomic/</link>
    <pubDate>Sat, 18 Feb 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E6%A0%87%E5%87%86%E5%BA%93-atomic/</guid>
    <description><![CDATA[[toc] 一、Atomic 方法 如果去看文档会发现 atomic 的函数签名有很多，但是大部分都是重复的为了不同的数据类型创建了不同的签名，这就是没有泛型的坏处了，]]></description>
</item>
<item>
    <title>Go-基础操作</title>
    <link>https://blog.seucy.me/go%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Tue, 10 Jan 2023 20:13:28 &#43;0800</pubDate>
    <author>Chuyu</author>
    <guid>https://blog.seucy.me/go%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[Go实践操作 [toc] 二、基础 记录遇到的问题： 当使用go get安装包之后，在pkg中也可找到，但还是无法使用，显示unresolved。这其实是因为]]></description>
</item>
</channel>
</rss>
